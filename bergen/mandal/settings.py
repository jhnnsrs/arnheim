"""
Django settings for mandal project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import os


# General Debug or Production Settings
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#             _____  _   _ _    _ ______ _____ __  __
#       /\   |  __ \| \ | | |  | |  ____|_   _|  \/  |
#      /  \  | |__) |  \| | |__| | |__    | | | \  / |
#     / /\ \ |  _  /| . ` |  __  |  __|   | | | |\/| |
#    / ____ \| | \ \| |\  | |  | | |____ _| |_| |  | |
#   /_/    \_\_|  \_\_| \_|_|  |_|______|_____|_|  |_|
#                  Arnheim Settings

ARNHEIM_LOGGING = os.getenv("ARNHEIM_LOGGING", "False") == "True"
ARNHEIM_DEBUG = os.getenv("ARNHEIM_DEBUG", "False") == "True"
ARNHEIM_DOMAIN = os.getenv("ARNHEIM_DOMAIN","localhost")
ARNHEIM_SQL_ENGINE = os.environ.get("ARNHEIM_SQL_ENGINE", "django.db.backends.sqlite3")
ARNHEIM_STORAGE_MODE = os.environ.get("ARNHEIM_STORAGE_MODE","LOCAL")

# Zarr Related
ZARR_COMPRESSION = os.getenv("ZARR_COMPRESSION",None)
ZARR_DTYPE = os.getenv("ZARR_DTYPE",float)

# Redis Settings
REDIS_HOST = os.environ.get('REDIS_SERVICE_HOST', 'redis')
REDIS_PORT = os.environ.get("REDIS_SERVICE_PORT_REDISPORT", 6379)


#Minio Settings:
MINIO_HOST = os.environ.get("MINIO_SERVICE_HOST", "minio")
MINIO_PORT = os.environ.get("MINIO_SERVICE_PORT_MINIOPORT", 9000)



# Postgres Settings
POSTGRES_DB = os.environ.get("POSTGRES_DB", os.path.join(BASE_DIR, "db.sqlite3"))
POSTGRES_USER = os.environ.get("POSTGRES_USER", "user")
POSTGRES_PASSWORD = os.environ.get("POSTGRES_PASSWORD", "password")
POSTGRES_HOST =  os.environ.get("POSTGRES_SERVICE_HOST", "localhost")
POSTGRES_PORT = os.environ.get("POSTGRES_SERVICE_PORT_POSTGRESPORT", 5432)

# Dask Setings =
DASK_SCHEDULER_HOST =  os.environ.get("DASK_SCHEDULER_SERVICE_HOST", "localhost")
DASK_SCHEDULER_PORT = os.environ.get("DASK_SCHEDULER_SERVICE_DASKPORT", 5432)

#    _____            _               _
#   |  __ \          (_)             | |
#   | |  | | ___ _ __ ___   _____  __| |
#   | |  | |/ _ \ '__| \ \ / / _ \/ _` |
#   | |__| |  __/ |  | |\ V /  __/ (_| |
#   |_____/ \___|_|  |_| \_/ \___|\__,_|
#       Derived Settings for Django

MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# S3 Settings
AWS_S3_ENDPOINT_URL  = 'http://' + MINIO_HOST + ":" + str(MINIO_PORT)
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID", "weak_acces_key")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY", "weak_secret_key")
AWS_STORAGE_BUCKET_NAME = "test"
AWS_S3_URL_PROTOCOL ="http:"
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
AWS_S3_USE_SSL = True
AWS_S3_SECURE_URLS = False # SHould resort to True if using in Production behind TLS

ZARR_BUCKET = "zarr"
MEDIA_BUCKET = "media"
FILES_BUCKET = "files"


if ARNHEIM_DEBUG:
    ALLOWED_HOSTS = ["*"]
else:
    ALLOWED_HOSTS = [ARNHEIM_DOMAIN, "web"]

MEDIA_URL = "/media/"

# Overwrite Django Settings
DEBUG = ARNHEIM_DEBUG
SECRET_KEY = os.environ.get('ARNHEIM_KEY', 'e+uck-nbb+_%(d@%s-@l@*o!xp__p7rssglb74xr*6=m5lh=vx')

# SECURITY WARNING: don't run with debug turned on in production!

#Cors Settings and SSL settings
CORS_ORIGIN_ALLOW_ALL = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


STORAGE_MODE = ARNHEIM_STORAGE_MODE
# Application definition
INSTALLED_APPS = [
    'registration',
    'dal',
    'dal_select2',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'oauth2_provider',
    'graphene_django',
    'rest_framework',
    'django_filters',
    'django_extensions',
    'corsheaders',
    'channels',
    'larvik',
    'taggit',
    'social',
    'metamorphers',
    'transformers',
    'evaluators',
    'mutaters',
    'bioconverter',
    'drawing',
    'elements',
    'revamper',
    'flow',
    'answers',
    'visualizers',
    'importer',
    'strainers',
    'filters',
]

# Registration Settings
ACCOUNT_ACTIVATION_DAYS = 7 # One-week activation window; you may, of course, use a different value.
REGISTRATION_AUTO_LOGIN = True # Automatically log the user in.


# Channel layer definitions
# http://channels.readthedocs.io/en/latest/topics/channel_layers.html
CHANNEL_LAYERS = {
    "default": {
        # This example app uses the Redis channel layer implementation channels_redis
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}

# ASGI_APPLICATION should be set to your outermost router
ASGI_APPLICATION = 'mandal.routing.application'

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {
        'read': 'Reading all of your Data ',
        'read_starred': "Reading your shared Data",
        'write': 'Modifying all of your Data',
        'profile': 'Access to your Profile (including Email, Name and Address'}

}

# Rest Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    )
}

GRAPHENE = {
    'SCHEMA': 'gql.schema.schema', # Where your Graphene schema lives
    'MIDDLEWARE': [
            'graphene_django_extras.ExtraGraphQLDirectiveMiddleware'
        ]
}


DEFAULT_FILE_STORAGE = 'larvik.storage.s3.MediaStorage'

GRAPHENE_DJANGO_EXTRAS = {
    'DEFAULT_PAGINATION_CLASS': 'graphene_django_extras.paginations.LimitOffsetGraphqlPagination',
    'DEFAULT_PAGE_SIZE': 20,
    'MAX_PAGE_SIZE': 50,
    'CACHE_ACTIVE': True,
    'CACHE_TIMEOUT': 300  # seconds
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mandal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
                os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mandal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": ARNHEIM_SQL_ENGINE,
        "NAME": POSTGRES_DB,
        "USER": POSTGRES_USER,
        "PASSWORD": POSTGRES_PASSWORD,
        "HOST": POSTGRES_HOST,
        "PORT": POSTGRES_PORT,
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_REDIRECT_URL = "/"
# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
    },
}


# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_ROOT =  os.path.join(BASE_DIR, "static_collected")
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

FIXTURE_DIRS =  [ "fixtures"]


if ARNHEIM_LOGGING:
    try:
        from larvik.logging import get_module_logger
    except Exception as e:
        print("Larvik is apparently not installed. Make sure it is")
    logger = get_module_logger(__name__)
    logger.info(f"Hosting on {repr(ALLOWED_HOSTS)}")

    logger.info(f"Zarr Compression: {ZARR_COMPRESSION}")
    logger.info(f"Zarr Dtype: {ZARR_DTYPE}")

    logger.info(f"Redis Host: {REDIS_HOST}")
    logger.info(f"Redis Port: {REDIS_PORT}")

    logger.info(f"Dask Scheduler Port: {DASK_SCHEDULER_PORT}")
    logger.info(f"Dask Scheduler Host: {DASK_SCHEDULER_HOST}")


    logger.info(f"Scheduling in {ARNHEIM_STORAGE_MODE} Storage Mode")

    logger.info(f"Postgres Port: {POSTGRES_PORT}")
    logger.info(f"Postgres Host: {POSTGRES_HOST}")
    logger.info(f"Postgres User: {POSTGRES_USER}")
    logger.info(f"Postgres DB: {POSTGRES_DB}")
    logger.info(f"Postgres Password: {POSTGRES_PASSWORD}")
