"""
Django settings for arbeid project.

Generated by 'django-admin startproject' using Django 2.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from larvik.logging import get_module_logger

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('ARNHEIM_KEY', 'e+uck-nbb+_%(d@%s-@l@*o!xp__p7rssglb74xr*6=m5lh=vx')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

logger = get_module_logger(__name__)
# General Debug or Production Settings
arnheim_debug = os.getenv("ARNHEIM_DEBUG", "False") == "True"
ARNHEIM_DEBUG = arnheim_debug

# Arnheim Settings
arnheim_host = os.getenv("ARNHEIM_DOMAIN","localhost")
ARNHEIM_HOST = arnheim_host


# Compression Settings
TRANSFORMATION_DTYPE =  os.getenv("TRANSFORMATION_DTYPE",None)
TRANSFORMATION_COMPRESSION =  os.getenv("TRANSFORMATION_COMPRESSION",None)
PANDAS_COMPRESSION =  os.getenv("PANDAS_COMPRESSION",None)
REPRESENTATION_DTYPE =  os.getenv("REPRESENTATION_DTYPE",None)
REPRESENTATION_COMPRESSION =  os.getenv("REPRESENTATION_COMPRESSION",None)
ZARR_COMPRESSION = os.getenv("ZARR_COMPRESSION",None)


ZARR_DTYPE = os.getenv("ZARR_DTYPE",float)

# Redis Settings
redis_host = os.environ.get('REDIS_HOST', 'redis')

# Postgres
postgres_host = os.environ.get('POSTGRES_HOST', 'postgres')
postgres_port = int(os.environ.get('POSTGRES_PORT', 5432))


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Roots for Files
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
FILES_ROOT = os.path.join(BASE_DIR, "files")
BIOIMAGE_ROOT = os.path.join(MEDIA_ROOT, "bioimages")
H5FILES_ROOT = os.path.join(MEDIA_ROOT, "h5files")
ZARR_ROOT = os.path.join(MEDIA_ROOT, "zarr")
PANDAS_ROOT = os.path.join(MEDIA_ROOT, "pandas")
NIFTI_ROOT = os.path.join(MEDIA_ROOT, "nifti")
PROFILES_ROOT = os.path.join(MEDIA_ROOT, "profiles")
EXCELS_ROOT = os.path.join(MEDIA_ROOT, "excels")
UPLOAD_ROOT = os.path.join(MEDIA_ROOT, "_upload")

MODULES = []
try:
    MODULES = os.environ.get("ARNHEIM_MODULES","").split(",")
    logger.info(f"Working with Modules {repr(MODULES)}")
except:
    logger.error("Arnheim Module configuration incorrect, check ENV")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'larvik',
    'flow',
    'elements',
] + MODULES



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'arbeid.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Channel layer definitions
# http://channels.readthedocs.io/en/latest/topics/channel_layers.html
CHANNEL_LAYERS = {
    "default": {
        # This example app uses the Redis channel layer implementation channels_redis
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(redis_host, 6379)],
        },
    },
}

# ASGI_APPLICATION should be set to your outermost router
ASGI_APPLICATION = 'arbeid.routing.application'


WSGI_APPLICATION = 'arbeid.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("POSTGRES_DB", os.path.join(BASE_DIR, "db.sqlite3")),
        "USER": os.environ.get("POSTGRES_USER", "user"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "password"),
        "HOST": os.environ.get("POSTGRES_HOST", "localhost"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
