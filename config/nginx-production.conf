events {
   worker_connections  1024;

}



http {

  include       /etc/nginx/mime.types;

  upstream channels-backend {
    server web:8000;
  }

  server {
    listen 443 ssl;
    server_name    arnheim.online;
    ssl_certificate /etc/letsencrypt/live/arnheim.online/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/arnheim.online/privkey.pem;

    add_header X-Clacks-Overhead "GNU Terry Pratchett";
    add_header X-Clacks-Overhead "GNU Terry Pratchet";
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,x-ijt';


    location /images {

      client_max_body_size 8000M;
      client_body_buffer_size 8000M;
      client_body_timeout 120;


      alias /media;

      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';

      if ($request_filename ~* ^.*?/([^/]*?)$) {
        set $filename $1;
      }


      if ($filename ~* ^.*?\.((nii.gz)|(nii)|(gz))$) {
        add_header Content-Disposition 'inline; filename="$filename"';
        add_header Content-Type "application/gzip";
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      }
    }



    location / {
      client_max_body_size 8000M;
      client_body_buffer_size 8000M;
      client_body_timeout 120;

      try_files $uri @proxy_to_app;
    }



    location @proxy_to_app {

      add_header X-Clacks-Overhead "GNU Terry Pratchett";
      add_header X-Clacks-Overhead "GNU Terry Pratchet";
      add_header 'Access-Control-Allow-Credentials' 'true';
      add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,x-ijt';

      proxy_pass http://channels-backend;

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";

      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $server_name;
      proxy_set_header X-Forwarded-Proto https;
    }

    location /jupyter {
      client_max_body_size 8000M;
      client_body_buffer_size 8000M;
      client_body_timeout 120;

      proxy_read_timeout 300s;
      try_files $uri @proxy_to_jup;
    }

    location ~ /jupyter/api/kernels/ {
            proxy_pass            http://jupyter;
            proxy_set_header      Host $host;
            # websocket support
            proxy_http_version    1.1;
            proxy_set_header      Upgrade "websocket";
            proxy_set_header      Connection "Upgrade";
            proxy_read_timeout    86400;
        }
    location ~ /jupyter/terminals/ {
            proxy_pass            http://jupyter;
            proxy_set_header      Host $host;
            # websocket support
            proxy_http_version    1.1;
            proxy_set_header      Upgrade "websocket";
            proxy_set_header      Connection "Upgrade";
            proxy_read_timeout    86400;
    }

    location @proxy_to_jup {
      proxy_read_timeout 300s;
      proxy_pass http://jupyter;

      proxy_set_header Host $host;
      proxy_set_header X-Real-Ip $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }


  }

  server {
    listen 80;
    server_name           arnheim.online;


    location /.well-known/acme-challenge/ {
      root /var/www/certbot;
    }


    location / {
      return 301 https://$host$request_uri;
    }



  }

}
