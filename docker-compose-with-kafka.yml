version: "3.7"

services:
  db:
    image: postgres
    volumes:
      - dbdata:/var/lib/postgresql/data
  redis:
    image: redis:latest
  web:
    build: bergen
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./bergen:/code
      - media:/code/media/
    ports:
      - "8000:8000"
    links:
      - redis
      - worker
      - db
  worker:
    build: bergen
    depends_on:
      - kafka
    command: python manage.py runworker channels maxisp bioconverter nifti image test prewitt linerect transformimage aisdata analyzer slicedmaxisp mapping sliceline kafka kafkain masker clusterdata
    volumes:
      - ./bergen:/code
      - media:/code/media/
    links:
      - redis
  nginx:
    restart: always
    build: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - media:/media/
    links:
      - web
      - worker
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: "test:1:1,web:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  notebook:
    build: jupjup
    command: jupyter lab --port=90 --ip=0.0.0.0 --allow-root --notebook-dir=/notebooks/
    environment:
      - HOME=home
    volumes:
      - ./notebooks:/notebooks
      - ./bergen:/code/
      - media:/code/media/
      - files:/code/files/
    ports:
      - "90:90"
  parsers:
    build: parsers
    depends_on:
      - kafka
    command: python parse-engine.py
    ports:
      - "5000:5000"
    volumes:
      - ./parsers:/code

volumes:
  vscode:
  dbdata:
  media:
    driver_opts:
      type: none
      device: /c/Programme/Trontheim/arnheim/media
      o: bind
  files:
    driver_opts:
      type: none
      device: /c/Data/Files
      o: bind
